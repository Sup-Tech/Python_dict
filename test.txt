Module$$模块$$null$$包含一系列数据、函数、类的文件，通常以.py结尾 让一些相关的数据，函数，类有逻辑的组织在一起，使逻辑结构更加清晰。有利于多人合作开发。$$
import$$导入$$null$$将某模块整体导入到当前模块中$$
from import$$从...导入$$null$$将模块内的一个或多个成员导入到当前模块的作用域中。$$
from import *$$从...导入所有$$null$$将某模块的所有成员导入到当前模块。$$
__all__$$模块变量$$__all__变量：定义可导出成员$$仅对from xx import *语句有效$$
__doc__$$模块变量$$__doc__变量：文档字符串$$null$$
__file__$$模块变量$$__file__变量：模块对应的文件路径名。$$null$$
__name__$$模块变量$$__name__变量：模块自身名字，可以判断是否为主模块。$$null$$
builtins$$内置模块$$null$$python内置模块，在解析器的内部可以直接使用，不需要(import)导入$$
package$$包$$将模块以文件夹的形式进行分组管理$$让一些相关的模块组织在一起，使逻辑结构更加清晰。$$
__init__.py$$.py文件$$是包内必须存在的文件,会在包加载时被自动调用$$null$$
Error$$异常$$常见异常类型:名称异常(NameError),类型异常(TypeError),索引异常(IndexError),属性异常(AttributeError),键异常(KeyError),为实现异常(NotImplementedError),异常基类Exception$$运行时检测到的错误。当异常发生时，程序不会再向下执行，而转到函数的调用语句。$$
try$$尝试(python语法词)$$try:可能触发异常的语句 except 错误类型: 处理语句1$$作用：将程序由异常状态转为正常流程(try...except...是与if...else...相似的语法结构)$$
except$$排除(错误/异常)__(属于python语法/python关键字)$$try:可能触发异常的语句 except 错误类型: 处理语句1$$作用：将程序由异常状态转为正常流程(try...except...是与if...else...相似的语法结构)$$
raise$$抛出(错误/异常)__(属于python语法/python关键字)$$null$$抛出一个错误，让程序进入异常状态。$$
iterable$$可迭代对象$$具有__iter__函数的对象，可以返回迭代器对象$$for 变量名 in 可迭代对象:....$$
iterator$$迭代器对象$$可以被next()函数调用并返回下一个值的对象$$null$$
generator$$生成器$$能够动态(循环一次计算一次返回一次)提供数据的可迭代对象。$$1.	在循环过程中，按照某种算法推算数据，不必创建容器存储完整的结果，从而节省内存空间。数据量越大，优势越明显。2.	以上作用也称之为延迟操作或惰性操作，通俗的讲就是在需要的时候才计算结果，而不是一次构建出所有结果。$$
yield$$生成$$null$$null$$
enumerate$$枚举函数$$for 变量 in enumerate(可迭代对象):语句$$作用：遍历可迭代对象时，可以将索引与元素组合为一个元组$$
zip$$压缩$$for item in zip(可迭代对象1, 可迭代对象2….):语句$$1.	作用：将多个可迭代对象中对应的元素组合成一个个元组，生成的元组个数由最小的可迭代对象决定。$$
lambda$$匿名函数$$是一种匿名方法$$作用：作为参数传递时语法简洁，优雅，代码可读性强。随时创建和销毁，减少程序耦合度。$$
map$$映射$$map（函数，可迭代对象）$$使用可迭代对象中的每个元素调用函数，将返回值作为新可迭代对象元素；返回值为新可迭代对象。$$
filter$$筛选$$filter(函数，可迭代对象)$$根据条件筛选可迭代对象中的元素，返回值为新可迭代对象。$$
sorted$$排序$$sorted(可迭代对象，key = 函数,reverse = bool值)$$排序，返回值为排序结果。$$
max$$最大值$$max(可迭代对象，key = 函数)$$根据函数获取可迭代对象的最大值。$$
min$$最小值$$min(可迭代对象，key = 函数)$$根据函数获取可迭代对象的最小值。$$
def$$函数定义语法$$def 函数名(参数):...$$null$$
return$$返回$$null$$return会返回一个值，如果不在循环中会停止函数／方法的执行，如果在循环中，会停止循环$$
decorator$$函数装饰器$$在不改变原函数的调用以及内部代码情况下，为其添加新功能的函数$$null$$
